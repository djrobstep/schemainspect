version: 2
jobs:
  build-pg14:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:14.1
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: create postgres user
          command: psql postgresql://@localhost/circleci -c 'create role postgres'
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - "~/.venv"
      - run:
          name: Check formatting
          command: |
            . ~/.venv/bin/activate
            make lint
      - run:
          command: |
            . ~/.venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  build-pg13:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:13.5
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: create postgres user
          command: psql postgresql://@localhost/circleci -c 'create role postgres'
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - "~/.venv"
      - run:
          name: Check formatting
          command: |
            . ~/.venv/bin/activate
            make lint
      - run:
          command: |
            . ~/.venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  build-pg12:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
      - image: cimg/postgres:12.9
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: create postgres user
          command: psql postgresql://@localhost/circleci -c 'create role postgres'
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - "~/.venv"
      - run:
          name: Check formatting
          command: |
            . ~/.venv/bin/activate
            make lint
      - run:
          command: |
            . ~/.venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  build-pg11:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
      - image: circleci/postgres:11
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: create postgres user
          command: psql postgresql://@localhost/circleci -c 'create role postgres'
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - "~/.venv"
      - run:
          name: Check formatting
          command: |
            . ~/.venv/bin/activate
            make lint
      - run:
          command: |
            . ~/.venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  build-pg10:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
      - image: circleci/postgres:10.19
        environment:
          POSTGRES_USER: circleci
          POSTGRES_DB: circleci
          POSTGRES_HOST_AUTH_METHOD: trust
    steps:
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - run: sudo apt-get install -y postgresql-client
      - run:
          name: create postgres user
          command: psql postgresql://@localhost/circleci -c 'create role postgres'
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate

            poetry install
      - save_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
          paths:
            - "~/.venv"
      - run:
          name: Check formatting
          command: |
            . ~/.venv/bin/activate
            make lint
      - run:
          command: |
            . ~/.venv/bin/activate
            make test
      - store_artifacts:
          path: test-reports/
          destination: tr1

  publish:
    working_directory: ~/circleci
    docker:
      - image: cimg/python:3.10
    steps:
      - setup_remote_docker
      - checkout
      - restore_cache:
          key: deps1-{{ .Branch }}-{{ checksum "pyproject.toml" }}
      - run:
          name: Install poetry
          command: |
            python --version
            python -m pip install -U pip setuptools poetry
            poetry config virtualenvs.create false
      - run:
          name: Install deps
          command: |
            python -m venv ~/.venv
            . ~/.venv/bin/activate
            poetry install
      - run:
          name: Bump version, build, install
          command: |
            . ~/.venv/bin/activate
            python deploy/vbump.py
            poetry build
            poetry publish --username $PYPI_USERNAME --password $PYPI_PASSWORD


workflows:
  version: 2
  build-then-publish:
    jobs:
      - build-pg14
      - build-pg13
      - build-pg12
      - build-pg11
      - build-pg10
      - publish:
          requires:
            - build-pg14
            - build-pg13
            - build-pg12
            - build-pg11
            - build-pg10
          filters:
            branches:
              only: master
